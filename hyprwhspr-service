#!/bin/bash

# Hyprwhspr Service Control Script
# Easy control script for managing the hyprwhspr SystemD service

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Service name
SERVICE_NAME="hyprwhspr.service"

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if service exists
check_service() {
    if ! systemctl --user list-unit-files | grep -q "hyprwhspr"; then
        log_error "Service $SERVICE_NAME not found"
        log_info "Please run the installation script first:"
        echo "  ./install.sh"
        exit 1
    fi
}

# Show service status
show_status() {
    log_info "Service status for $SERVICE_NAME:"
    echo
    systemctl --user status "$SERVICE_NAME" --no-pager
    
    echo
    if systemctl --user is-active --quiet "$SERVICE_NAME"; then
        log_success "Service is running"
    else
        log_warning "Service is not running"
    fi
    
    if systemctl --user is-enabled --quiet "$SERVICE_NAME"; then
        log_success "Service is enabled for auto-start"
    else
        log_warning "Service is not enabled for auto-start"
    fi
}

# Start service
start_service() {
    log_info "Starting $SERVICE_NAME..."
    if systemctl --user start "$SERVICE_NAME"; then
        log_success "Service started successfully"
        sleep 1
        if systemctl --user is-active --quiet "$SERVICE_NAME"; then
            log_success "Service is running!"
        else
            log_warning "Service started but may not be running properly"
            log_info "Check status with: $0 status"
        fi
    else
        log_error "Failed to start service"
        exit 1
    fi
}

# Stop service
stop_service() {
    log_info "Stopping $SERVICE_NAME..."
    if systemctl --user stop "$SERVICE_NAME"; then
        log_success "Service stopped successfully"
    else
        log_error "Failed to stop service"
        exit 1
    fi
}

# Restart service
restart_service() {
    log_info "Restarting $SERVICE_NAME..."
    if systemctl --user restart "$SERVICE_NAME"; then
        log_success "Service restarted successfully"
        sleep 1
        if systemctl --user is-active --quiet "$SERVICE_NAME"; then
            log_success "Service is running!"
        else
            log_warning "Service restarted but may not be running properly"
            log_info "Check status with: $0 status"
        fi
    else
        log_error "Failed to restart service"
        exit 1
    fi
}

# Enable service
enable_service() {
    log_info "Enabling $SERVICE_NAME for auto-start..."
    if systemctl --user enable "$SERVICE_NAME"; then
        log_success "Service enabled for auto-start on login"
    else
        log_error "Failed to enable service"
        exit 1
    fi
}

# Disable service
disable_service() {
    log_info "Disabling $SERVICE_NAME..."
    if systemctl --user disable "$SERVICE_NAME"; then
        log_success "Service disabled - will not auto-start on login"
    else
        log_error "Failed to disable service"
        exit 1
    fi
}

# Show service logs
show_logs() {
    local lines=${1:-50}
    log_info "Showing last $lines lines of service logs:"
    echo
    journalctl --user -u "$SERVICE_NAME" -n "$lines" --no-pager
}

# Follow service logs
follow_logs() {
    log_info "Following service logs (Ctrl+C to stop):"
    echo
    journalctl --user -u "$SERVICE_NAME" -f
}

# Test hyprwhspr functionality
test_hyprwhspr() {
    log_info "Testing hyprwhspr functionality..."
    
    # Check if binary exists
    if ! command -v hyprwhspr &> /dev/null; then
        log_error "hyprwhspr binary not found in PATH"
        exit 1
    fi
    
    # Check if service is running
    if ! systemctl --user is-active --quiet "$SERVICE_NAME"; then
        log_warning "Service is not running - starting it first..."
        start_service
    fi
    
    echo
    log_info "Testing hyprwhspr commands:"
    
    # Test status command
    echo "Testing status command..."
    if hyprwhspr status; then
        log_success "Status command works"
    else
        log_warning "Status command failed"
    fi
    
    echo
    log_info "You can test recording with:"
    echo "  hyprwhspr toggle    # Toggle recording on/off"
    echo "  hyprwhspr start     # Start recording"
    echo "  hyprwhspr stop      # Stop recording"
    echo
    log_info "Press SUPER+D (if configured in Hyprland) to toggle recording"
}

# Show usage
show_usage() {
    echo "Hyprwhspr Service Control Script"
    echo
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo
    echo "Commands:"
    echo "  status                 Show service status"
    echo "  start                  Start the service"
    echo "  stop                   Stop the service"
    echo "  restart                Restart the service"
    echo "  enable                 Enable auto-start on login"
    echo "  disable                Disable auto-start"
    echo "  logs [LINES]           Show last N lines of logs (default: 50)"
    echo "  follow                 Follow live logs"
    echo "  test                   Test hyprwhspr functionality"
    echo "  help                   Show this help"
    echo
    echo "Examples:"
    echo "  $0 status              # Check service status"
    echo "  $0 start               # Start service"
    echo "  $0 logs 100            # Show last 100 log lines"
    echo "  $0 follow              # Follow live logs"
    echo
    echo "Service name: $SERVICE_NAME"
}

# Main function
main() {
    case "${1:-help}" in
        "status")
            check_service
            show_status
            ;;
        "start")
            check_service
            start_service
            ;;
        "stop")
            check_service
            stop_service
            ;;
        "restart")
            check_service
            restart_service
            ;;
        "enable")
            check_service
            enable_service
            ;;
        "disable")
            check_service
            disable_service
            ;;
        "logs")
            check_service
            show_logs "${2:-50}"
            ;;
        "follow")
            check_service
            follow_logs
            ;;
        "test")
            check_service
            test_hyprwhspr
            ;;
        "help"|"-h"|"--help")
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            echo
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"